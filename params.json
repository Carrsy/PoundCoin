{"name":"PoundCoin","tagline":"Cryptocurrency for U.K.","body":"Poundcoin integration/staging tree\r\n================================\r\n\r\n\r\nhttp://coingen.bluematt.me/create.html?id=aa5d3a8d&key=d073047cb775dd66d668\r\n\r\nCopyright (c) 2009-2013 Bitcoin Developers\r\n\r\nWhat is Poundcoin?\r\n----------------\r\n\r\nPoundcoin is an experimental new digital currency that enables instant payments to\r\nanyone, anywhere in the world. Poundcoin uses peer-to-peer technology to operate\r\nwith no central authority: managing transactions and issuing money are carried\r\nout collectively by the network. Poundcoin is also the name of the open source\r\nsoftware which enables the use of this currency.\r\n\r\nFor more information, as well as an immediately useable, binary version of\r\nthe Poundcoin client software, see http://coingen.bluematt.me/create.html?id=aa5d3a8d&key=d073047cb775dd66d668\r\nLicense\r\n-------\r\n\r\nPoundcoin is released under the terms of the MIT license. See `COPYING` for more\r\ninformation or see http://opensource.org/licenses/MIT.\r\n\r\nPoundcoin is based on Bitcoin.\r\nIts development tracks Bitcoin's, the following information applies to Bitcoin's developemnt.\r\nDevelopment process\r\n-------------------\r\n\r\nDevelopers work in their own trees, then submit pull requests when they think\r\ntheir feature or bug fix is ready.\r\n\r\nIf it is a simple/trivial/non-controversial change, then one of the Bitcoin\r\ndevelopment team members simply pulls it.\r\n\r\nIf it is a *more complicated or potentially controversial* change, then the patch\r\nsubmitter will be asked to start a discussion (if they haven't already) on the\r\n[mailing list](http://sourceforge.net/mailarchive/forum.php?forum_name=bitcoin-development).\r\n\r\nThe patch will be accepted if there is broad consensus that it is a good thing.\r\nDevelopers should expect to rework and resubmit patches if the code doesn't\r\nmatch the project's coding conventions (see `doc/coding.md`) or are\r\ncontroversial.\r\n\r\nThe `master` branch is regularly built and tested, but is not guaranteed to be\r\ncompletely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\r\nregularly to indicate new official, stable release versions of Bitcoin.\r\n\r\nTesting\r\n-------\r\n\r\nTesting and code review is the bottleneck for development; we get more pull\r\nrequests than we can review and test. Please be patient and help out, and\r\nremember this is a security-critical project where any mistake might cost people\r\nlots of money.\r\n\r\n### Automated Testing\r\n\r\nDevelopers are strongly encouraged to write unit tests for new code, and to\r\nsubmit new unit tests for old code.\r\n\r\nUnit tests for the core code are in `src/test/`. To compile and run them:\r\n\r\n    cd src; make -f makefile.unix test\r\n\r\nUnit tests for the GUI code are in `src/qt/test/`. To compile and run them:\r\n\r\n    qmake BITCOIN_QT_TEST=1 -o Makefile.test bitcoin-qt.pro\r\n    make -f Makefile.test\r\n    ./bitcoin-qt_test\r\n\r\nEvery pull request is built for both Windows and Linux on a dedicated server,\r\nand unit and sanity tests are automatically run. The binaries produced may be\r\nused for manual QA testing â€” a link to them will appear in a comment on the\r\npull request posted by [BitcoinPullTester](https://github.com/BitcoinPullTester). See https://github.com/TheBlueMatt/test-scripts\r\nfor the build/test scripts.\r\n\r\n### Manual Quality Assurance (QA) Testing\r\n\r\nLarge changes should have a test plan, and should be tested by somebody other\r\nthan the developer who wrote the code.\r\n\r\nSee https://github.com/bitcoin/QA/ for how to create a test plan.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}